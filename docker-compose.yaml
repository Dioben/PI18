version: "3.8" 
services:
    db:
        container_name: timescaledb
        image: timescale/timescaledb:latest-pg13
        ports: 
         - "5432:5432"
        environment:
         - POSTGRES_PASSWORD=postgres
         - POSTGRES_USER=root
         - POSTGRES_DB=nntracker
        volumes:
            - ./timescaledbdocker/data:/var/lib/postgresql/data
            # copy the sql script to create tables
            - ./DB_CONF/:/docker-entrypoint-initdb.d/
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U root -h localhost -d nntracker"]
            interval: 5s
            timeout: 5s
            retries: 5
    graphing:
        container_name: grafana
        image: grafana/grafana
        ports: 
         - "3000:3000"
        environment:
            - GF_SECURITY_ADMIN_USER=admin
            - GF_SECURITY_ADMIN_PASSWORD=grafana
        depends_on:
           db:
            condition: service_healthy
        volumes:
            - ./grafana:/etc/grafana/provisioning/datasources
    server:
        container_name: tracker-server
        #image: dioben/nntrackerua-server:latest
        build: ./server
        ports: 
         - "8000:8000"
        depends_on:
            db:
                condition: service_healthy
    deployer:
        container_name: tracker-deployer
        image: dioben/nntrackerua-deployer:latest
        #build: ./deployer
        ports: 
         - "7000:7000"
        expose:
            - "6380"
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock

        environment:
            - FLASK_ENV=development
        command: flask run -p 7000 --host 0.0.0.0
    deployer_worker:
        container_name: tracker-deployer-worker
        image: dioben/nntrackerua-deployer:latest
        #build: ./deployer
        command: celery -A app:celery worker --loglevel=info
        volumes:
            - /var/run/docker.sock:/var/run/docker.sock
    celery_deployer:
        container_name: redis_deployer
        image: redis:latest
        ports: 
            - "6380:6380"
        expose:
            - "6380"
        command: ["--port", "6380"]
        volumes:
            - ./deployer/redis.conf:/tmp/redis.conf
    parser:
        container_name: tracker-parser
        image: dioben/nntrackerua-parser:latest
        ports: 
         - "6000:6000"
        depends_on:
            db:
                condition: service_healthy
    celery_broker:
        container_name: redis
        image: redis:latest
        ports:
         - "6379:6379"
